(function() {
    'use strict';

    // === SECURITY & PERFORMANCE ===
    const SCRIPT_NAME = 'FB_MultiColumn_Enhanced';
    const VERSION = '20250627.1';

    // CSP-safe inline styles prevention
    const safeCSS = (css) => css.replace(/javascript:/gi, '').replace(/expression\(/gi, '');

    // Debounce for performance
    const debounce = (func, wait) => {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    };

    // === SETTINGS MANAGEMENT ===
    const defaultSettings = {
        columnCount: 3,
        columnGap: 20,
        maxPostHeight: 70,
        sidebarWidth: 60,
        enabled: true,
        language: 'vi'
    };

    const getSettings = () => {
        try {
            const saved = GM_getValue('fb_multicolumn_settings', JSON.stringify(defaultSettings));
            return { ...defaultSettings, ...JSON.parse(saved) };
        } catch (e) {
            console.warn(`${SCRIPT_NAME}: Settings parse error, using defaults`);
            return defaultSettings;
        }
    };

    const saveSettings = (settings) => {
        try {
            GM_setValue('fb_multicolumn_settings', JSON.stringify(settings));
        } catch (e) {
            console.error(`${SCRIPT_NAME}: Failed to save settings`);
        }
    };

    let currentSettings = getSettings();

    // === TRANSLATIONS ===
    const translations = {
        vi: {
            title: 'Cài đặt Facebook Multi-Column',
            columns: 'Số cột',
            gap: 'Khoảng cách (px)',
            height: 'Chiều cao bài viết (%)',
            sidebar: 'Độ rộng thanh bên (px)',
            enable: 'Bật Multi-Column',
            save: 'Lưu',
            reset: 'Đặt lại',
            close: 'Đóng',
            performance: 'Hiệu suất',
            appearance: 'Giao diện'
        },
        en: {
            title: 'Facebook Multi-Column Settings',
            columns: 'Columns',
            gap: 'Gap (px)',
            height: 'Post Height (%)',
            sidebar: 'Sidebar Width (px)',
            enable: 'Enable Multi-Column',
            save: 'Save',
            reset: 'Reset',
            close: 'Close',
            performance: 'Performance',
            appearance: 'Appearance'
        }
    };

    const t = (key) => translations[currentSettings.language]?.[key] || translations.en[key] || key;

    // === CSS GENERATION ===
    const generateCSS = (settings) => {
        if (!settings.enabled) return '';

        return safeCSS(`
/* === Facebook Multi-Column Enhanced v${VERSION} === */
:root {
    --fb-mc-columns: ${Math.max(1, Math.min(6, settings.columnCount))};
    --fb-mc-gap: ${Math.max(10, Math.min(50, settings.columnGap))}px;
    --fb-mc-height: ${Math.max(50, Math.min(100, settings.maxPostHeight))}vh;
    --fb-mc-sidebar: ${Math.max(50, Math.min(200, settings.sidebarWidth))}px;
}

/* Performance optimizations */
* {
    will-change: auto;
}

/* Main container optimization */
.x1ceravr.xq1tmr.xvue9z.x193iq5w,
.x1xwk8fm.x193iq5w,
.xsfy40s.x1miatn0.x9f619 {
    width: calc(100% - var(--fb-mc-sidebar));
    margin-right: -30px;
    contain: layout style paint;
}

/* Homepage container */
.x1iyjqo2.x1r8uery {
    max-width: 100%;
}

/* Left sidebar optimization */
.xxzkxad.x9e5oc1,
.xh78kpn.xcoz2nd.x2bj2ny,
.x1vjfegm.x2lah0s.xeuugli {
    max-width: var(--fb-mc-sidebar);
    min-width: var(--fb-mc-sidebar);
    position: sticky;
    top: 0;
    z-index: 10;
    contain: layout;
}

/* Multi-column layout */
.x6o7n8i>div>div,
.x1xwk8fm.x193iq5w {
    display: flex;
    flex-wrap: wrap;
    gap: var(--fb-mc-gap);
    justify-content: flex-start;
    align-content: flex-start;
    contain: layout style paint;
}

/* Post sizing with performance */
.x6o7n8i>div>div>.x1lliihq,
.x1xwk8fm.x193iq5w>div {
    width: calc((100% - (var(--fb-mc-gap) * (var(--fb-mc-columns) - 1))) / var(--fb-mc-columns));
    max-height: var(--fb-mc-height);
    overflow-y: auto;
    overflow-x: hidden;
    scrollbar-width: thin;
    contain: layout;
    transform: translateZ(0); /* GPU acceleration */
}

/* Smooth scrolling */
.x6o7n8i>div>div>.x1lliihq::-webkit-scrollbar,
.x1xwk8fm.x193iq5w>div::-webkit-scrollbar {
    width: 6px;
}

.x6o7n8i>div>div>.x1lliihq::-webkit-scrollbar-thumb,
.x1xwk8fm.x193iq5w>div::-webkit-scrollbar-thumb {
    background: rgba(255,255,255,0.3);
    border-radius: 3px;
}

/* Hide unnecessary elements */
.x1daaz14.x1t2pt76,
.xwib8y2.x1y1aw1k.xwya9rg,
.xq1tmr.xvue9z>.x1yztbdb,
footer {
    display: none !important;
}

/* Responsive adjustments */
@media (max-width: 1200px) {
    :root {
        --fb-mc-columns: ${Math.max(1, settings.columnCount - 1)};
    }
}

@media (max-width: 900px) {
    :root {
        --fb-mc-columns: 2;
    }
}

@media (max-width: 600px) {
    :root {
        --fb-mc-columns: 1;
    }
}
`);
    };

    // === UI CREATION ===
    const createControlUI = () => {
        // Remove existing UI
        const existing = document.getElementById('fb-mc-control');
        if (existing) existing.remove();

        const controlDiv = document.createElement('div');
        controlDiv.id = 'fb-mc-control';
        controlDiv.innerHTML = `
            <div id="fb-mc-toggle" title="${t('title')}">⚙️</div>
            <div id="fb-mc-panel" style="display: none;">
                <h3>${t('title')}</h3>
                <div class="fb-mc-section">
                    <h4>${t('appearance')}</h4>
                    <label>
                        ${t('columns')}: <span id="fb-mc-columns-value">${currentSettings.columnCount}</span>
                        <input type="range" id="fb-mc-columns" min="1" max="6" value="${currentSettings.columnCount}">
                    </label>
                    <label>
                        ${t('gap')}: <span id="fb-mc-gap-value">${currentSettings.columnGap}</span>
                        <input type="range" id="fb-mc-gap" min="10" max="50" value="${currentSettings.columnGap}">
                    </label>
                    <label>
                        ${t('height')}: <span id="fb-mc-height-value">${currentSettings.maxPostHeight}</span>
                        <input type="range" id="fb-mc-height" min="50" max="100" value="${currentSettings.maxPostHeight}">
                    </label>
                    <label>
                        ${t('sidebar')}: <span id="fb-mc-sidebar-value">${currentSettings.sidebarWidth}</span>
                        <input type="range" id="fb-mc-sidebar" min="50" max="200" value="${currentSettings.sidebarWidth}">
                    </label>
                </div>
                <div class="fb-mc-section">
                    <label class="fb-mc-checkbox">
                        <input type="checkbox" id="fb-mc-enable" ${currentSettings.enabled ? 'checked' : ''}>
                        ${t('enable')}
                    </label>
                </div>
                <div class="fb-mc-buttons">
                    <button id="fb-mc-save">${t('save')}</button>
                    <button id="fb-mc-reset">${t('reset')}</button>
                    <button id="fb-mc-close">${t('close')}</button>
                </div>
            </div>
        `;

        // Add control styles
        GM_addStyle(`
#fb-mc-control {
    position: fixed;
    top: 100px;
    right: 20px;
    z-index: 9999;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
}

#fb-mc-toggle {
    width: 40px;
    height: 40px;
    background: #1877f2;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    font-size: 18px;
    box-shadow: 0 2px 8px rgba(24, 119, 242, 0.3);
    transition: all 0.3s ease;
}

#fb-mc-toggle:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(24, 119, 242, 0.5);
}

#fb-mc-panel {
    position: absolute;
    right: 50px;
    top: 0;
    width: 300px;
    background: white;
    border-radius: 12px;
    box-shadow: 0 8px 24px rgba(0,0,0,0.15);
    padding: 20px;
    border: 1px solid #e4e6ea;
}

#fb-mc-panel h3 {
    margin: 0 0 15px 0;
    color: #1c1e21;
    font-size: 16px;
    font-weight: 600;
}

#fb-mc-panel h4 {
    margin: 15px 0 10px 0;
    color: #65676b;
    font-size: 14px;
    font-weight: 500;
}

.fb-mc-section {
    margin-bottom: 15px;
}

#fb-mc-panel label {
    display: block;
    margin-bottom: 12px;
    color: #1c1e21;
    font-size: 14px;
}

#fb-mc-panel input[type="range"] {
    width: 100%;
    margin-top: 5px;
}

.fb-mc-checkbox {
    display: flex;
    align-items: center;
    gap: 8px;
}

.fb-mc-buttons {
    display: flex;
    gap: 8px;
    margin-top: 15px;
}

.fb-mc-buttons button {
    flex: 1;
    padding: 8px 12px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    transition: background-color 0.2s;
}

#fb-mc-save {
    background: #42b883;
    color: white;
}

#fb-mc-save:hover {
    background: #369870;
}

#fb-mc-reset {
    background: #f23030;
    color: white;
}

#fb-mc-reset:hover {
    background: #d92626;
}

#fb-mc-close {
    background: #e4e6ea;
    color: #1c1e21;
}

#fb-mc-close:hover {
    background: #d8dadf;
}
        `);

        document.body.appendChild(controlDiv);

        // Event listeners
        const toggle = document.getElementById('fb-mc-toggle');
        const panel = document.getElementById('fb-mc-panel');
        const closeBtn = document.getElementById('fb-mc-close');

        toggle.addEventListener('click', () => {
            panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
        });

        closeBtn.addEventListener('click', () => {
            panel.style.display = 'none';
        });

        // Range inputs
        ['columns', 'gap', 'height', 'sidebar'].forEach(setting => {
            const input = document.getElementById(`fb-mc-${setting}`);
            const value = document.getElementById(`fb-mc-${setting}-value`);

            input.addEventListener('input', debounce(() => {
                value.textContent = input.value;
                updatePreview();
            }, 100));
        });

        // Enable checkbox
        document.getElementById('fb-mc-enable').addEventListener('change', updatePreview);

        // Buttons
        document.getElementById('fb-mc-save').addEventListener('click', saveCurrentSettings);
        document.getElementById('fb-mc-reset').addEventListener('click', resetSettings);
    };

    let previewStyle = null;

    const updatePreview = debounce(() => {
        const newSettings = {
            columnCount: parseInt(document.getElementById('fb-mc-columns').value),
            columnGap: parseInt(document.getElementById('fb-mc-gap').value),
            maxPostHeight: parseInt(document.getElementById('fb-mc-height').value),
            sidebarWidth: parseInt(document.getElementById('fb-mc-sidebar').value),
            enabled: document.getElementById('fb-mc-enable').checked,
            language: currentSettings.language
        };

        if (previewStyle) previewStyle.remove();

        previewStyle = document.createElement('style');
        previewStyle.textContent = generateCSS(newSettings);
        document.head.appendChild(previewStyle);
    }, 200);

    const saveCurrentSettings = () => {
        currentSettings = {
            columnCount: parseInt(document.getElementById('fb-mc-columns').value),
            columnGap: parseInt(document.getElementById('fb-mc-gap').value),
            maxPostHeight: parseInt(document.getElementById('fb-mc-height').value),
            sidebarWidth: parseInt(document.getElementById('fb-mc-sidebar').value),
            enabled: document.getElementById('fb-mc-enable').checked,
            language: currentSettings.language
        };

        saveSettings(currentSettings);
        applyStyles();

        // Visual feedback
        const saveBtn = document.getElementById('fb-mc-save');
        const originalText = saveBtn.textContent;
        saveBtn.textContent = '✓ ' + (currentSettings.language === 'vi' ? 'Đã lưu!' : 'Saved!');
        saveBtn.style.background = '#28a745';

        setTimeout(() => {
            saveBtn.textContent = originalText;
            saveBtn.style.background = '#42b883';
        }, 1500);
    };

    const resetSettings = () => {
        currentSettings = { ...defaultSettings };
        saveSettings(currentSettings);

        // Update UI
        document.getElementById('fb-mc-columns').value = currentSettings.columnCount;
        document.getElementById('fb-mc-gap').value = currentSettings.columnGap;
        document.getElementById('fb-mc-height').value = currentSettings.maxPostHeight;
        document.getElementById('fb-mc-sidebar').value = currentSettings.sidebarWidth;
        document.getElementById('fb-mc-enable').checked = currentSettings.enabled;

        // Update value displays
        document.getElementById('fb-mc-columns-value').textContent = currentSettings.columnCount;
        document.getElementById('fb-mc-gap-value').textContent = currentSettings.columnGap;
        document.getElementById('fb-mc-height-value').textContent = currentSettings.maxPostHeight;
        document.getElementById('fb-mc-sidebar-value').textContent = currentSettings.sidebarWidth;

        applyStyles();
        updatePreview();
    };

    // === MAIN STYLE APPLICATION ===
    let mainStyle = null;

    const applyStyles = () => {
        if (mainStyle) mainStyle.remove();
        if (previewStyle) previewStyle.remove();

        const css = generateCSS(currentSettings);
        if (css) {
            if (typeof GM_addStyle !== "undefined") {
                GM_addStyle(css);
            } else {
                mainStyle = document.createElement("style");
                mainStyle.textContent = css;
                (document.querySelector("head") || document.documentElement).appendChild(mainStyle);
            }
        }
    };

    // === INITIALIZATION ===
    const init = () => {
        // Apply styles immediately
        applyStyles();

        // Create UI when DOM is ready
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', createControlUI);
        } else {
            setTimeout(createControlUI, 1000); // Delay for Facebook's dynamic loading
        }

        // Handle Facebook's SPA navigation
        let lastUrl = location.href;
        const observer = new MutationObserver(() => {
            if (location.href !== lastUrl) {
                lastUrl = location.href;
                setTimeout(() => {
                    applyStyles();
                    if (!document.getElementById('fb-mc-control')) {
                        createControlUI();
                    }
                }, 500);
            }
        });

        observer.observe(document.body, { childList: true, subtree: true });

        console.log(`${SCRIPT_NAME} v${VERSION} initialized`);
    };

    // Start the script
    init();

})();